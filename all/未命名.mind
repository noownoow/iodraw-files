{"root":{"data":{"id":"d22bku9wbvs0","created":1718630252137,"text":"第一章 可编程控制器编程语言"},"children":[{"data":{"id":"d22blel11z40","created":1718630296345,"text":"IEC61131-3标准的产生与特点"},"children":[{"data":{"id":"d22bqhbm3w80","created":1718630694127,"text":"传统PLC编程语言的不足"},"children":[{"data":{"id":"d22bsh5xu540","created":1718630850512,"text":"梯形图语言规范不一致"},"children":[]},{"data":{"id":"d22bsqpoys80","created":1718630871298,"text":"程序可复用性差"},"children":[]},{"data":{"id":"d22bt4z2rww0","created":1718630902340,"text":"缺乏足够的程序封装能力"},"children":[]},{"data":{"id":"d22bth0t9o00","created":1718630928567,"text":"不支持数据结构"},"children":[]},{"data":{"id":"d22btkg2ju00","created":1718630936020,"text":"程序执行有局限性"},"children":[]},{"data":{"id":"d22btqvrqqo0","created":1718630950030,"text":"难以实现选择或并行等复杂顺控程序"},"children":[]},{"data":{"id":"d22bu6s1ef40","created":1718630984632,"text":"传统的梯形图程序在算数运算处理、字符串或文字处理等方面据不能提供强有力的支持"},"children":[]}]},{"data":{"id":"d22bscb9fco0","created":1718630839950,"text":"IEC 61131-3标准的产生"},"children":[{"data":{"id":"d22bx3d4tkg0","created":1718631212293,"text":"IEC 61131-3特点"},"children":[{"data":{"id":"d22c3pp3eoo0","created":1718631731091,"text":"IEC61131-3允许在同一个PLC中使用多种编程语言，允许程序开发人员对每一个特定的任务选择最合适的编程语言，还允许在同一个控制\n程序中不同的软件模块用不同的编程语言编制，以充分发挥不同编程语\n言的应用特点。标准中的多语言包容性很好地正视了PLC发展历史中形\n成的编程语言多样化的现实，为PLC软件技术的进一步发展提供了足够\n的技术空间和自由度。"},"children":[]}]},{"data":{"id":"d22bylar7oo0","created":1718631329696,"text":"IEC61131-3优势"},"children":[{"data":{"id":"d22c6dxvkfs0","created":1718631940593,"text":"编程语言支持模块化，将常用的程序功能划分为若干单元，并加以\n封装，构成编程的基础。"},"children":[]},{"data":{"id":"d22c6fvq7uo0","created":1718631944817,"text":"模块化时，只设置必要的、尽可能少的输入和输出参数，尽量减少\n交互作用和内部数据交换。"},"children":[]},{"data":{"id":"d22c6nfzyaw0","created":1718631961280,"text":"模块化接口之间的交互作用均采用显性定义。"},"children":[]},{"data":{"id":"d22c6s1bcgw0","created":1718631971276,"text":" 将信息隐藏于模块内，对使用者来讲只需了解该模块的外部特性\n（即功能、输入和输出参数），而无需了解模块内算法的具体实现方法。"},"children":[]},{"data":{"id":"d22c6yi7fog0","created":1718631985358,"text":"➢IEC 61131-3支持自顶而下（Top Down）和自底而上（Bottom Up）\n的程序开发方法。自顶而下的开发过程是用户首先进行系统总体设计，\n将控制任务划分为若干个模块，然后定义变量和进行模块设计，编写各\n个模块的程序；"},"children":[]},{"data":{"id":"d22c73czp6g0","created":1718631995926,"text":"自底而上的开发过程是用户先从底部开始编程，例如先导出函数和功\n能块，再按照控制要求编制程序。无论选择何种开发方法，IEC 61131-\n3所创建的开发环境均会在整个编程过程中给予强有力的支持"},"children":[]},{"data":{"id":"d22c79d72fc0","created":1718632009000,"text":"IEC 61131-3所规范的编程系统独立于任一个具体的目标系统，它可以\n最大限度地在不同的PLC目标系统中运行。这样不仅创造了一种具有良\n好开放性的氛围，奠定了PLC编程开放性的基础，而且可以有效规避标\n准与具体目标系统关联而引起的利益纠葛，体现标准的公正性。"},"children":[]},{"data":{"id":"d22c7m2gtuw0","created":1718632036649,"text":"将现代软件概念浓缩，并加以运用。例如：数据使用DATA_TYPE声\n明机制；功能（函数）使用FUNCTION声明机制；数据和功能的组合使\n用FUNCTION _BLOCK声明机制。"},"children":[]},{"data":{"id":"d22c7teaakg0","created":1718632052601,"text":"完善的数据类型定义和运算限制。软件工程师很早就认识到许多编程\n的错误往往发生在程序的不同部分，其数据的表达和处理不同。IEC \n61131-3从源头上注意防止这类低级的错误，虽然采用的方法可能导致\n效率降低一点，但换来的价值却是程序的可靠性、可读性和可维护性。"},"children":[]},{"data":{"id":"d22c7yl587k0","created":1718632063900,"text":"对程序执行具有完全的控制能力。传统的PLC只能按扫描方式顺序执\n行程序，对程序执行的其他要求，如由事件驱动某一段程序的执行、程\n序的并行处理等均无能为力。IEC 61131-3允许程序的不同部分、在不\n同的条件（包括时间条件）下、以不同的比率并行执行"},"children":[]},{"data":{"id":"d22c83mh1dc0","created":1718632074864,"text":"结构化编程。对于循环执行的程序、中断执行的程序、初始化执行的\n程序等可以分开设计。此外，循环执行的程序还可以根据执行的周期分\n开设计"},"children":[]}]}]},{"data":{"id":"d22c3jj43mw0","created":1718631717668,"text":"IEC 61131-6 功能安全"},"children":[]}]},{"data":{"id":"d22bmqzu9t40","created":1718630401727,"text":"IEC61131-3编程语言的基本内容"},"children":[{"data":{"id":"d22c8fmjw0o0","created":1718632100990,"text":"公共元素"},"children":[{"data":{"id":"d22cb63l4cw0","created":1718632315345,"text":"数据类型定义"},"children":[{"data":{"id":"d22ce24gte00","created":1718632541783,"text":"数据类型的标准化是编程语言开放性的重要标准。\n在IEC 61131-3中定义一般数据类型和非一般数据类型两类。非一般\n数据类型又可分为基本数据类型和衍生数据类型。基本数据类型有21种。\n数据类型与它在数据存储器中所占用的数据宽度有关。"},"children":[]}]},{"data":{"id":"d22cbautpnk0","created":1718632325699,"text":"变量"},"children":[{"data":{"id":"d22cfkwncc80","created":1718632661034,"text":"与数据的外部表示相反，变量提供能够改变其内容的数据对象的识\n别方法。例如，可改变与PLC输入、输出或存储器有关的数据。变量可以\n被声明为基本数据类型、一般数据类型和导出数据类型。"},"children":[]}]},{"data":{"id":"d22cbcphaao0","created":1718632329729,"text":"软件模型元素"},"children":[{"data":{"id":"d22cbvagcyw0","created":1718632370180,"text":"配置"},"children":[]},{"data":{"id":"d22cbycby7k0","created":1718632376823,"text":"资源"},"children":[]},{"data":{"id":"d22cc0wmofs0","created":1718632382404,"text":"任务"},"children":[]},{"data":{"id":"d22cc2d3ecw0","created":1718632385577,"text":"程序"},"children":[]}]},{"data":{"id":"d22cbhuqrvk0","created":1718632340931,"text":"软件模型"},"children":[]},{"data":{"id":"d22cblzdv140","created":1718632349919,"text":"程序组织单元"},"children":[]},{"data":{"id":"d22cbp6rzzk0","created":1718632356897,"text":"顺序功能图"},"children":[]}]},{"data":{"id":"d22c9ygjn1s0","created":1718632220350,"text":"编程语言"},"children":[{"data":{"id":"d22ca2rqrjc0","created":1718632229734,"text":"文本语言"},"children":[{"data":{"id":"d22cayghh600","created":1718632298710,"text":"指令表"},"children":[]},{"data":{"id":"d22cb12wjo00","created":1718632304420,"text":"结构化文本"},"children":[]}]},{"data":{"id":"d22ca7uawnc0","created":1718632240773,"text":"图形语言"},"children":[{"data":{"id":"d22caggl9k00","created":1718632259535,"text":"功能块图"},"children":[]},{"data":{"id":"d22cakbj4i00","created":1718632267936,"text":"梯形图"},"children":[]},{"data":{"id":"d22camp9rc80","created":1718632273120,"text":"连续功能图"},"children":[]}]}]}]},{"data":{"id":"d22bnqwtxtc0","created":1718630479909,"text":"程序组织单元"},"children":[{"data":{"id":"d22chydyu0w0","created":1718632847107,"text":"POU元素组成"},"children":[{"data":{"id":"d22cidrykcw0","created":1718632880605,"text":"声明部分"},"children":[{"data":{"id":"d22cipo5t280","created":1718632906497,"text":"接口变量"},"children":[]},{"data":{"id":"d22ciyw9mmw0","created":1718632926578,"text":"局部变量"},"children":[]}]},{"data":{"id":"d22ciljlq0g0","created":1718632897514,"text":"代码部分"},"children":[{"data":{"id":"d22cj3y15i00","created":1718632937569,"text":"PROGRAM"},"children":[{"data":{"id":"d22ckqgaxdk0","created":1718633064927,"text":"主程序，包括I/O口的分配、全局变量和存取路径"},"children":[]}]},{"data":{"id":"d22cjizt1i80","created":1718632970328,"text":"FUNCTION_BLOCK"},"children":[{"data":{"id":"d22cjq6gn6o0","created":1718632985968,"text":"带输入输出的块"},"children":[]}]},{"data":{"id":"d22ck0kf1ps0","created":1718633008579,"text":"FUNCTION"},"children":[{"data":{"id":"d22ck4mbxgw0","created":1718633017402,"text":"具有功能值的块，用于扩展PLC的基本预算和操作集"},"children":[]}]}]}]},{"data":{"id":"d22cuoya2n40","created":1718633845302,"text":"程序","layout_right_offset":{"x":62.99999953061342,"y":20.999999843537807}},"children":[{"data":{"id":"d22cuype5i80","created":1718633866532,"text":"程序是程序组织单元之一，它由功能和功能块组成。PROGRAM类\n型的程序组织单元称为主程序。在一个多CPU的PLC控制系统中，能同时\n执行多个主程序，这一点体现了程序与功能块的不同。\n程序代表PLC用户的最高层，能存取PLC的I／O口，并能使它们能为\n其它程序组织单元所存取。IEC 61131-3标准使用变量以存储信息。但是，\n它们的存储位置不再需要由用户自行定义，而是由编程系统自行进行管\n理，每个变量具有固定的数据类型。IEC 61131-3规定若干数据类型，这\n些数据类型在位数量和符号的使用方面有所不同。\n程序以PROGRAM关键字开始，随后是程序名、程序声明和程序体，\n最后以END_PROGRAM关键字结束。与功能或功能块的声明类似，程序\n声明包括在整个程序声明中所使用变量的声明"},"children":[]}]},{"data":{"id":"d22cn3tb9280","created":1718633250740,"text":"功能","layout_right_offset":{"x":33.99999974668026,"y":-30.999999769032},"expandState":"expand"},"children":[{"data":{"id":"d22cn6r84m80","created":1718633257144,"text":"功能是一种可以赋予参数，但没有静态变量的程序组织单元。有些\n书籍或文献也称功能为函数。当用相同的输入参数调用某一功能时，该\n功能总能够生成相同的结果作为其功能值。功能有多个输入变量，没有\n输出变量，但有一个功能值作为该功能的返回值。功能由功能名和一个\n表达式组成。"},"children":[{"data":{"id":"d22cnhxdjjs0","created":1718633281461,"text":"标准功能"},"children":[{"data":{"id":"d22co6tcwyo0","created":1718633335637,"text":"类型转换功能：数据类型的转换"},"children":[]},{"data":{"id":"d22coc3eq6w0","created":1718633347129,"text":"数值类功能：对数值变量进行数学运算"},"children":[]},{"data":{"id":"d22coh1xsc00","created":1718633357924,"text":"算术类功能：计算多个输入变量的算术功能"},"children":[]},{"data":{"id":"d22coma83j40","created":1718633369309,"text":"位串类功能：包括串移位运算和位串的按位布尔功能。"},"children":[]},{"data":{"id":"d22coqbgp080","created":1718633378091,"text":"选择和比较类功能：根据条件来选择输入信号作为输出返回值。"},"children":[]},{"data":{"id":"d22coviw3dc0","created":1718633389424,"text":"字符串类功能：字符串功能用于对输入的字符串进行处理"},"children":[]},{"data":{"id":"d22coyv162g0","created":1718633396688,"text":"时间数据类功能"},"children":[]},{"data":{"id":"d22cp6ed4f40","created":1718633413095,"text":"枚举数据类型的功能"},"children":[]}]},{"data":{"id":"d22cnvawu340","created":1718633310577,"text":"用户定义功能"},"children":[]}]}]},{"data":{"id":"d22cr617rbk0","created":1718633569028,"text":"功能块"},"children":[{"data":{"id":"d22cr63o8w80","created":1718633569177,"text":"标准功能块"},"children":[{"data":{"id":"d22cs9w6sso0","created":1718633655795,"text":"（1）双稳元素功能块 "},"children":[]},{"data":{"id":"d22csddiszc0","created":1718633663374,"text":"（2）边缘检测功能块 "},"children":[]},{"data":{"id":"d22cshaeu3k0","created":1718633671893,"text":"（3）计数器功能块 "},"children":[]},{"data":{"id":"d22csm4myjk0","created":1718633682428,"text":"（4）定时器功能块 "},"children":[]},{"data":{"id":"d22csov86yo0","created":1718633688389,"text":"（5）通信功能块"},"children":[]}]},{"data":{"id":"d22cruy5yag0","created":1718633623263,"text":"衍生功能块"},"children":[]},{"data":{"id":"d22cryb5z400","created":1718633630580,"text":"用户定义功能块"},"children":[]}]},{"data":{"id":"d22ctjsbe400","created":1718633755693,"text":"功能与功能块的区别"},"children":[{"data":{"id":"d22ctwfm5u80","created":1718633783223,"text":"功能和功能块的主要区别在于，相同输入参数调用时，功能总是产\n生相同的结果（功能值），功能没有“记忆”特性。\n功能有输入变量，没有输出变量，但有一个功能值作为该功能的返\n回值；而功能块可以有输入和输出变量。\n功能块可以调用功能，而功能不能调用功能块"},"children":[]}]}]},{"data":{"id":"d22bo3vhl480","created":1718630508126,"text":"软件、通信和功能模块"},"children":[{"data":{"id":"d22cw1rylk00","created":1718633951582,"text":"软件模型"},"children":[{"data":{"id":"d22cw5vho340","created":1718633960503,"text":"配置","layout_right_offset":{"x":13.999999895691872,"y":-20.999999843537807}},"children":[{"data":{"id":"d22d0tcv6vk0","created":1718634325076,"text":"语言元素（结构元素 ），相当于IEC61131-1标准定义的PLC系统。\n➢ 位于软件模型的最上层，等同于一个PLC软件或应用 程序。\n➢ 多台PLC构成的一个控制系统中，每一台PLC的应用程序都是一个独立的配置。\n➢ 配置将系统内所有资源结合成组，为资源提供数据交换的手段。\n➢ 一个配置可有多个资源，配置中定义该配置的全局变量、资源、存取路径等，它反映PLC的硬件物理结构，为程序与物理I/O通道之间提供接口。"},"children":[]}]},{"data":{"id":"d22czffhi9s0","created":1718634216395,"text":"资源","layout_right_offset":{"x":18.99999985843897,"y":1.9999999850988388}},"children":[{"data":{"id":"d22d1myxm680","created":1718634389537,"text":"语言元素，结构元素\n➢ 位于软件模型的第二层 ，等同于一个CPU\n➢ 为程序和PLC物理输入输出通道提供接口\n➢ 程序只有装入资源才能执行\n➢ 一个资源具有“信号处理功能”、“人机接口功能”和“传感器和执行\n器接口功能”\n➢ 资源声明在该资源内的全局变量、任务和程序声明等\n➢ 每个资源可以支持多于一个程序。资源使PLC能够加载、启动和执行许\n多总体独立的程序"},"children":[]}]},{"data":{"id":"d22czgv8p200","created":1718634219525,"text":"任务"},"children":[{"data":{"id":"d22d2apem280","created":1718634441204,"text":"语言元素，结构元素\n➢ 位于软件模型第三层 。规定程序组织单元在运行期的特性\n➢ 任务是执行控制元素，具有调用能力。它控制一系列程序组织单元周期\n地执行，或者根据一个特定的事件触发来执行\n➢ 任务有任务名和三个输入参数\n★ SINGAL：事件触发输入端，上升沿触发与任务相关联的程序组织\n单元执行一次\n★ INTERVAL：周期执行时的时间间隔。该任务的有关程序组织单元\n按该时间间隔周期执行\n★ PRIORITY：对任务设置的优先级 ，0表示最高优先级"},"children":[]},{"data":{"id":"d22d2rmn6zc0","created":1718634478042,"text":"任务的执行"},"children":[{"data":{"id":"d22d2z8nfk00","created":1718634494610,"text":"无优先级执行"},"children":[{"data":{"id":"d22d3hr2sk80","created":1718634534906,"text":"分支主题"},"children":[]}]},{"data":{"id":"d22d39gw5bc0","created":1718634516876,"text":"优先级执行"},"children":[]}]}]},{"data":{"id":"d22czjfbfow0","created":1718634225092,"text":"存取路径"},"children":[]},{"data":{"id":"d22czo5t3qg0","created":1718634235401,"text":"IEC61131-3编程语言软件模型与传统PLC软件模型的比较"},"children":[]}]}]}]},"template":"right","theme":"fresh-blue","version":"1.4.43"}